{"version":3,"sources":["redux/dataReducer.js","redux/types.js","redux/rootReducer.js","redux/actions.js","components/ColorChooseArea.js","components/ImgChooseArea.js","components/ChooseArea.js","components/OutputArea.js","App.js","serviceWorker.js","index.js"],"names":["initialState","selectedColors","selectedImagesUrl","selectedImagesFiles","itemsToShow","dataReducer","state","action","type","newColor","newImgUrl","newImgFile","newItem","filter","item","color","imgUrl","rootReducer","combineReducers","data","addNewItemToSlide","removeItemFromSlide","addNewImgUrlToSlide","dispatch","addNewImgUrl","connect","props","useDispatch","useState","currentColor","setCurrentColor","onClickDeleteItemHandler","event","target","getAttribute","removeColor","chosenColors","map","className","key","style","backgroundColor","height","removeitem","onClick","value","onChange","addNewColor","setPreviewImageUrl","removeImg","chosenImgUrlGroup","src","url","Math","ceil","random","id","accept","selectedFile","files","reader","FileReader","onload","result","readAsDataURL","htmlFor","ChooseArea","carouselItems","indexOf","Carousel","Item","length","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38be7f43.chunk.js","sourcesContent":["import { ADD_NEW_COLOR, ADD_NEW_IMG_URL, ADD_NEW_IMG_FILE, ADD_NEW_ITEM, REMOVE_COLOR, REMOVE_IMG, REMOVE_ITEM } from './types';\r\n\r\nconst initialState = {\r\n\tselectedColors: [],\r\n\tselectedImagesUrl: [],\r\n\tselectedImagesFiles: [],\r\n\titemsToShow: []\r\n}\r\n\r\nfunction dataReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_NEW_COLOR:\r\n\t\t\treturn {...state, selectedColors: [...state.selectedColors, action.newColor]}\r\n\t\tcase ADD_NEW_IMG_URL:\r\n\t\t\treturn {...state, selectedImagesUrl: [...state.selectedImagesUrl, action.newImgUrl]}\r\n\t\tcase ADD_NEW_IMG_FILE:\r\n\t\t\treturn {...state, selectedImagesFiles: [...state.selectedImagesFiles, action.newImgFile]}\r\n\t\tcase ADD_NEW_ITEM:\r\n\t\t\treturn {...state, itemsToShow: [...state.itemsToShow, action.newItem]}\r\n\t\tcase REMOVE_COLOR:\r\n\t\t\treturn {...state, selectedColors: state.selectedColors.filter(item => item !== action.color)}\r\n\t\tcase REMOVE_IMG:\r\n\t\t\treturn {...state, selectedImagesUrl: state.selectedImagesUrl.filter(item => item !== action.imgUrl)}\r\n\t\tcase REMOVE_ITEM:\r\n\t\t\treturn {...state, itemsToShow: state.itemsToShow.filter(item => item !== action.item)}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\tdefault: return state\r\n\t}\r\n}\r\n\r\nexport default dataReducer","export const ADD_NEW_COLOR = 'DATA/ADD_NEW_COLOR';\r\nexport const ADD_NEW_IMG_URL = 'DATA/ADD_NEW_IMG_URL';\r\nexport const ADD_NEW_IMG_FILE = 'DATA/ADD_NEW_IMG_FILE';\r\nexport const ADD_NEW_ITEM = 'DATA/ADD_NEW_ITEM';\r\nexport const REMOVE_COLOR = 'DATA/REMOVE_COLOR';\r\nexport const REMOVE_IMG = 'DATA/REMOVE_IMG';\r\nexport const REMOVE_ITEM = 'DATA/REMOVE_ITEM';","import {combineReducers} from 'redux';\r\nimport dataReducer from './dataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n\tdata: dataReducer\r\n})","import { ADD_NEW_COLOR, ADD_NEW_IMG_URL, ADD_NEW_IMG_FILE, ADD_NEW_ITEM, REMOVE_COLOR, REMOVE_IMG, REMOVE_ITEM } from './types';\r\n\r\nexport function addNewItemToSlide(newItem) {\r\n\treturn {\r\n\t\ttype: ADD_NEW_ITEM,\r\n\t\tnewItem\r\n\t}\r\n}\r\n\r\nexport function addNewColor(newColor) {\r\n\treturn {\r\n\t\ttype: ADD_NEW_COLOR,\r\n\t\tnewColor\r\n\t}\r\n}\r\n\r\nexport function addNewImgUrl(newImgUrl) {\r\n\treturn {\r\n\t\ttype: ADD_NEW_IMG_URL,\r\n\t\tnewImgUrl\r\n\t}\r\n}\r\n\r\nexport function removeColor(color) {\r\n\treturn {\r\n\t\ttype: REMOVE_COLOR,\r\n\t\tcolor\r\n\t}\r\n}\r\n\r\nexport function removeImg(imgUrl) {\r\n\treturn {\r\n\t\ttype: REMOVE_IMG,\r\n\t\timgUrl\r\n\t}\r\n}\r\n\r\nexport function removeItemFromSlide(item) {\r\n\treturn {\r\n\t\ttype: REMOVE_ITEM,\r\n\t\titem\r\n\t}\r\n}\r\n\r\n\r\nexport function addNewColorToSlide(newColor) {\r\n\treturn function(dispatch) {\r\n\t\tdispatch(addNewColor(newColor));\r\n\t\tdispatch(addNewItemToSlide(newColor));\r\n\t}\r\n}\r\n\r\nexport function addNewImgUrlToSlide(newImgUrl) {\r\n\treturn function(dispatch) {\r\n\t\tdispatch(addNewImgUrl(newImgUrl));\r\n\t\tdispatch(addNewItemToSlide(newImgUrl));\r\n\t}\r\n}\r\n\r\n// export function addNewImgFileToSlide(newImgFile) {\r\n// \treturn function(dispatch) {\r\n// \t\tdispatch(addNewImgFile(newImgFile));\r\n// \t\tdispatch(addNewItemToSlide(newImgFile));\r\n// \t}\r\n// }\r\n\r\nexport function removeColorFromSlide(color) {\r\n\treturn function(dispatch) {\r\n\t\tdispatch(removeColor(color));\r\n\t\tdispatch(removeItemFromSlide(color));\r\n\t}\r\n}\r\n\r\nexport function removeImgFromSlide(imgUrl) {\r\n\treturn function(dispatch) {\r\n\t\tdispatch(removeImg(imgUrl));\r\n\t\tdispatch(removeItemFromSlide(imgUrl));\r\n\t}\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, connect } from 'react-redux';\r\nimport ColorItemToChoose from './ColorItemToChoose';\r\nimport { addNewColorToSlide, removeColorFromSlide } from '../redux/actions';\r\n\r\nfunction ColorChooseArea(props) {\r\n\tconst dispatch = useDispatch();\r\n\tconst [currentColor, setCurrentColor] = useState('');\r\n\r\n\tfunction addColorHandler(event) {\r\n\t\tsetCurrentColor(event.target.value);\r\n\t\tdispatch(addNewColorToSlide(event.target.value))\r\n\t}\r\n\r\n\tfunction onClickDeleteItemHandler(event) {\r\n\t\tdispatch(removeColorFromSlide(event.target.getAttribute('removeitem')))\r\n\t}\t\r\n\r\n\tconst chosenColors = props.selectedColors.map(color => {\r\n\t\treturn (\r\n\t\t\t<div className=\"col-sm-6 col-md-3 border p-0 preview-item\" key={color}>\r\n\t\t\t\t<div style={{backgroundColor: color, height: 100}} />\r\n\t\t\t\t<button type=\"button\" removeitem={color} className=\"remove-btn btn btn-danger\" onClick={onClickDeleteItemHandler}>&times;</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t\t<div className=\"choose-color-area\">\r\n\t\t\t\t  <div className=\"form-group row\">\r\n\t\t\t\t    \t<div className=\"col-md-3 my-auto\">\r\n\t\t\t\t    \t\t<label>Choose color: </label>\r\n\t\t\t\t    \t</div>\r\n\t\t\t\t    \t<div className=\"col\">\r\n\t\t\t\t    \t\t<input className=\"form-control\" type=\"color\" value={currentColor} onChange={addColorHandler}/>\r\n\t\t\t\t    \t</div>\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <div className=\"chosen-colors\">\r\n\t\t\t\t  \t<div className=\"row\">\r\n\t\t\t\t  \t\t{chosenColors}\r\n\t\t\t\t  \t</div>\r\n\t\t\t\t  </div>\r\n\t\t\t</div>\t\t\r\n\t)\r\n};\r\n\r\nconst mapStateToProps = state => ({selectedColors: state.data.selectedColors})\r\n\r\nexport default connect(mapStateToProps, null)(ColorChooseArea)","import React, { useState } from 'react';\r\nimport { useDispatch, connect } from 'react-redux';\r\nimport { addNewImgUrlToSlide, addNewImgFileToSlide, removeImgFromSlide } from '../redux/actions';\r\nimport './slider.css';\r\n\r\nfunction ImgChooseArea(props) {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst [previewImageUrl, setPreviewImageUrl] = useState();\r\n\tconst [previewImageFile, setPreviewImageFile] = useState(\"\");\r\n\r\n\tfunction onChangePreviewImgHandler(event) {\r\n\t\t  var selectedFile = event.target.files[0];\r\n\t\t  var reader = new FileReader();\r\n\r\n\t\t  reader.onload = function(event) {\r\n\t\t    setPreviewImageUrl(event.target.result);\r\n\t\t    dispatch(addNewImgUrlToSlide(event.target.result))\r\n\t\t  };\r\n\r\n\t\t  reader.readAsDataURL(selectedFile);\r\n\t}\r\n\r\n\tfunction onClickRandomImgHandler() {\r\n\t\tconst url = `https://source.unsplash.com/random/${Math.ceil(Math.random()*10)}`;\r\n\t\tsetPreviewImageUrl(url);\r\n\t\tdispatch(addNewImgUrlToSlide(url))\r\n\t}\r\n\r\n\tfunction onClickDeleteItemHandler(event) {\r\n\t\tdispatch(removeImgFromSlide(event.target.getAttribute('removeitem')))\r\n\t}\r\n\r\n\tconst chosenImgUrlGroup = props.selectedImagesUrl.map(imgUrl => {\r\n\t\treturn (\r\n\t\t\t<div className=\"col-sm-6 col-md-4 p-0 border preview-item\" key={imgUrl}>\r\n\t\t\t\t<img src={imgUrl} />\r\n\t\t\t\t<button type=\"button\" className=\"remove-btn btn btn-danger\" removeitem={imgUrl} onClick={onClickDeleteItemHandler}>&times;</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t});\r\n\r\n\treturn (\r\n\t\t\t<div className=\"choose-image-area\">\r\n\t\t\t\t<div className=\"row mt-2\">\r\n\t\t\t\t\t<div className=\"col pl-0\">\r\n\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-secondary w-100\" onClick={onClickRandomImgHandler}>Random image</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6\">\r\n\t\t\t\t\t\t<input type=\"file\" className=\"custom-file-input\" id=\"inputFile\" accept=\"image/jpeg, image/png\" onChange={onChangePreviewImgHandler}/>\r\n    \t\t\t\t\t<label className=\"custom-file-label m-0\" htmlFor=\"inputFile\">Upload</label>\t\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row mt-2\">\r\n\t\t\t\t\t{chosenImgUrlGroup}\r\n\t\t\t\t</div>\t\t\r\n\t\t\t</div>\t\t\r\n\t)\r\n};\r\n\r\nconst mapStateToProps = state => ({ selectedImagesUrl: state.data.selectedImagesUrl })\r\n\r\nexport default connect(mapStateToProps, null)(ImgChooseArea)","import React from 'react';\r\nimport ColorChooseArea from './ColorChooseArea';\r\nimport ImgChooseArea from './ImgChooseArea';\r\n\r\nfunction ChooseArea() {\r\n\treturn (\r\n\t\t<div className=\"my-3 choose-area\">\r\n\t\t\t<div className=\"row mt-2\">\r\n\t\t\t\t<div className=\"col my-2\">\r\n\t\t\t\t\t<ColorChooseArea />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row mt-2\">\r\n\t\t\t\t<div className=\"col my-2\">\r\n\t\t\t\t\t<ImgChooseArea />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ChooseArea","import React, {useState} from 'react';\r\nimport { useStore } from 'react-redux';\r\nimport {connect} from 'react-redux';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport './slider.css';\r\n\r\nfunction OutputArea(props) {\r\n\r\n\tconst carouselItems = props.itemsToShow.map(item => {\r\n\t\treturn (\r\n\t\t\t\t(item.indexOf('#') === 0) ?\r\n\t\t\t\t\t<Carousel.Item key={`colorItem${item}`}><div className=\"border\" style={{backgroundColor: item, height: 500}}></div></Carousel.Item> :\r\n\t\t\t\t\t<Carousel.Item key={`imgItem${item}`} className=\"text-center border\"><img src={item} style={{height: 500}}/></Carousel.Item>\r\n\t\t\t)\r\n\t})\r\n\t\r\n\r\n\treturn (\r\n\t\t\t<Carousel style={{height: 500}} className=\"border\">\r\n\t\t\t  \t{carouselItems.length ? carouselItems : <h4 className=\"text-center mt-5\">Add colors and images to make an amazing slideshow</h4>}\r\n\t\t\t</Carousel>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({ itemsToShow: state.data.itemsToShow })\r\n\r\nexport default connect(mapStateToProps, null)(OutputArea)","import React from 'react';\nimport ChooseArea from './components/ChooseArea';\nimport OutputArea from './components/OutputArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n\t\t<div className=\"row mt-2\">\n\t\t\t<div className=\"col-lg-6\">\n\t\t\t\t<ChooseArea />\n\t\t\t</div>\n\t\t\t<div className=\"col-lg-6\">\n\t\t\t\t<OutputArea />\n\t\t\t</div>\n\t\t</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './redux/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nconst app = (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\t\n);\nwindow.store = store;\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}